Method 2 ( Dynamic Programming ) 
The time complexity can be reduced by storing results of subproblems. The idea is similar to this post. We maintain a boolean table[n][n] that is filled in bottom up manner. The value of table[i][j] is true, if the substring is palindrome, otherwise false. To calculate table[i][j], we first check the value of table[i+1][j-1], if the value is true and str[i] is same as str[j], then we make table[i][j] true. Otherwise, the value of table[i][j] is made false.


Method 3 (Manacher's algorithm)
https://en.wikipedia.org/wiki/Longest_palindromic_substring

class Solution(object):
	def longestPalindrome(self, s):
		"""
		:type s: str
		:rtype: str
		"""
		newS = '#%s#' % '#'.join(s)
		length, center, rightMost, maxCenter, maxLen, i = len(newS), 0, 0, 0, 0, 0
		pArr = [0] * length
		while i < length:
			pArr[i] = 1 if rightMost < i else min(rightMost-i, pArr[(center << 1) - i])
			while i + pArr[i] < length and i - pArr[i] > -1 and newS[i + pArr[i]] == newS[i - pArr[i]]:
				pArr[i] += 1
			if i + pArr[i] > rightMost:
				center = i
				rightMost = i + pArr[i]
				if pArr[i] > maxLen:
					maxLen = pArr[i]
					maxCenter = i
			i += 1
		start = (maxCenter - maxLen + 1) >> 1
		return s[start: start + maxLen - 1]